name: Build & Sign Release Binaries

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            static: true
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            static: true
            archive_ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            static: false
            archive_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            static: false
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            static: false
            archive_ext: zip

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (for musl/static targets)
        if: matrix.static
        run: cargo install cross

      - name: Build binary
        run: |
          BIN_NAME=bip39key
          TARGET=${{ matrix.target }}
          if [[ "${{ matrix.static }}" == "true" ]]; then
            cross build --release --target=$TARGET
          else
            cargo build --release --target=$TARGET
          fi

      - name: Rename and compress binary
        run: |
          BIN_NAME=bip39key
          TARGET=${{ matrix.target }}
          ARCHIVE_EXT=${{ matrix.archive_ext }}
          mkdir -p dist
          cp target/$TARGET/release/$BIN_NAME dist/${BIN_NAME}-$TARGET

          if [[ "$ARCHIVE_EXT" == "zip" ]]; then
            zip -j dist/${BIN_NAME}-$TARGET.zip dist/${BIN_NAME}-$TARGET
          else
            tar -czf dist/${BIN_NAME}-$TARGET.tar.gz -C dist ${BIN_NAME}-$TARGET
          fi

      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign archive
        run: |
          TARGET=${{ matrix.target }}
          ARCHIVE_EXT=${{ matrix.archive_ext }}
          gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --output dist/bip39key-$TARGET.$ARCHIVE_EXT.sig \
              --detach-sign dist/bip39key-$TARGET.$ARCHIVE_EXT
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload archive and signature
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/bip39key-${{ matrix.target }}.${{ matrix.archive_ext }}
            dist/bip39key-${{ matrix.target }}.${{ matrix.archive_ext }}.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download dist from all jobs
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten and generate SHA256SUMS
        run: |
          mkdir -p final
          find dist -type f \( -name '*.tar.gz' -o -name '*.zip' \) -exec cp {} final/ \;
          cd final
          sha256sum * > SHA256SUMS

      - name: Import GPG key
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign SHA256SUMS
        run: |
          cd final
          gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --output SHA256SUMS.sig \
              --detach-sign SHA256SUMS
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload SHA256SUMS and signature
        uses: softprops/action-gh-release@v1
        with:
          files: |
            final/SHA256SUMS
            final/SHA256SUMS.sig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
